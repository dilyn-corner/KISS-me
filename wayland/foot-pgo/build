#!/bin/sh -e

# Version detection is just like... Mad borked
rm -rf .git

patch -p1 < static.patch

# For static building
export CFLAGS="$CFLAGS -static -l:libffi.a"
export CC=/usr/bin/cc

# Note to self: always make doc generation toggleable
sed -i "/subdir('doc')/d" meson.build

# The author *insists* we optimize the ever-living-fuck out of this package.
# So let's indulge them! LLVM makes this tricky, but here's how you do it.
# PGO builds only work with an active wayland session, so we assume the first
# build is from TTY.

export DESTDIR="$1"
export CFLAGS="$CFLAGS -fno-plt"
# Because fuck a werror
export CFLAGS="$CFLAGS -Wno-error"
# Clang specific; gcc: -Wno-missing-profile
export CFLAGS="$CFLAGS -Wno-ignored-optimization-argument"
export CFLAGS="$CFLAGS -Wno-profile-instr-out-of-date"

meson \
    --prefix=/usr \
    --buildtype=release \
    -Db_lto=true \
    . build

# First, we generate a PGO build
meson configure -Db_pgo=generate build
ninja -C build

# Then we generate some PGO data
foot_tmp=$(mktemp)
./build/foot --config=/dev/null \
    --term=xterm \
    sh -c \
    "scripts/generate-alt-random-writes.py \
    --scroll \
    --scroll-region \
    --colors-regular \
    --colors-bright \
    --colors-rgb \
    ${foot_tmp} && cat ${foot_tmp}"
rm "${foot_tmp}"

# This is required for llvm
llvm-profdata merge default_*profraw --output=default.profdata
# Make sure it's in the right directory
mv *.profdata build

# Now we should *use* the PGO data
# Note: we will get a hash mismatch because of this
meson configure -Db_pgo=use build

ninja -C build
ninja -C build install

# Install terminfo because duh
mkdir -p "$1/usr/share/terminfo/f"

cp build/f/foot        "$1/usr/share/terminfo/f/foot"
cp build/f/foot-direct "$1/usr/share/terminfo/f/foot-direct"
