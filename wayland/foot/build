#!/bin/sh -e

export DESTDIR="$1"
export CC="${CC:-cc}"

sed -i "s|fontconfig'|fontconfig', static: true|" meson.build
sed -i "s|xkbcommon',|xkbcommon', static: true,|" meson.build
sed -i "s|-scanner',|-scanner', static: true,|"   meson.build
sed -i "s|protocols'|protocols', static: true|"   meson.build
sed -i "s|pixman-1'|pixman-1', static: true|"     meson.build
sed -i "s|-client'|-client', static: true|"       meson.build
sed -i "s|threads'|threads', static: true|"       meson.build
sed -i "s|cursor'|cursor', static: true|"         meson.build
sed -i "s|freetype'|freetype', static: true|"     subprojects/fcft/meson.build
sed -i "s|harfbuzz'|harfbuzz', static: true|"     subprojects/fcft/meson.build

export CFLAGS="$CFLAGS -O3 -Wno-ignored-optimization-argument"
export CFLAGS="$CFLAGS -Wno-backend-plugin"

meson \
    --prefix=/usr \
    -Dbuildtype=release \
    -Dterminfo=disabled \
    -Ddocs=disabled \
    -Db_lto=true \
    -Dime=false \
    . build

# First, we generate a PGO build
meson configure -Db_pgo=generate build

ninja -C build
ninja -C build test

# We check to see if a wayland lock file exists in the runtime directory.
# If it exists, assume we're in a wayland session and build with full PGO.
# If it doesn't exist, assume we're not and build with partial PGO.
touch .pgotmp
./build/footclient --version
if [ "$WAYLAND_DISPLAY" ]; then

   set -- \
       ./scripts/generate-alt-random-writes.py \
       --scroll \
       --scroll-region \
       --colors-regular \
       --colors-bright \
       --colors-256 \
       --colors-rgb \
       --attr-bold \
       --attr-italic \
       --attr-underline \
       --sixel .pgotmp

   ./build/foot \
       --config=/dev/null \
       --term=xterm \
       sh -c "$* && cat .pgotmp"
else
    ./scripts/generate-alt-random-writes.py \
        --rows=67 \
        --cols=135 \
        --scroll \
        --scroll-region \
        --colors-regular \
        --colors-bright \
        --colors-rgb \
        --attr-bold \
        --attr-italic \
        --attr-underline \
        --sixel \
        .pgotmp

    ./build/pgo .pgotmp .pgotmp .pgotmp
    rm .pgotmp
fi

# This is required for llvm
llvm-profdata merge default_*profraw --output=build/default.profdata

# Now we should *use* the PGO data
meson configure -Db_pgo=use build

ninja -C build
ninja -C build install

# Generate our terminfo -- more valuable with ncurses
#sed -i 's/@default_terminfo@/foot/g' foot.info
#tic -x -o term.info foot.info
#install -Dm644 term.info "$DESTDIR/usr/share/terminfo/f/foot"

# Install the licenses
install -Dm755 LICENSE                    \
    "$DESTDIR/usr/share/LICENSES/foot.license"
install -Dm755 subprojects/fcft/LICENSE   \
    "$DESTDIR/usr/share/LICENSES/fcft.license"
install -Dm755 subprojects/tllist/LICENSE \
    "$DESTDIR/usr/share/LICENSES/tllist.license"
