#!/bin/sh -e

export DESTDIR="$1"

patch -p1 < static.patch

# For static building
export CFLAGS="$CFLAGS -static -l:libffi.a"
export CC=/usr/bin/cc

# Note to self: always make doc generation toggleable
sed -i "s|subdir('doc')||"          meson.build

# These headers are never in the right spot
fixHead=subprojects/fcft
install -Dm644 "$fixHead/fcft.h"   "$fixHead/fcft/fcft.h"
install -Dm644 "$fixHead/stride.h" "$fixHead/fcft/stride.h"
# The author *insists* we optimize the ever-living-fuck out of this package.
# So let's indulge them! LLVM makes this tricky, but here's how you do it.
# PGO builds only work with an active wayland session, so we assume the first
# build is from TTY.

export CFLAGS="$CFLAGS -fno-plt"
# Because fuck a werror
export CFLAGS="$CFLAGS -Wno-error"
# Clang specific; gcc: -Wno-missing-profile
export CFLAGS="$CFLAGS -Wno-ignored-optimization-argument"
export CFLAGS="$CFLAGS -Wno-profile-instr-out-of-date"

meson \
    --prefix=/usr \
    --buildtype=release \
    -Db_lto=true \
    . build

# First, we generate a PGO build
meson configure -Db_pgo=generate build
ninja -C build

# We branch here; if foot is already installed we just assume we're running in a
# wayland session (a bit presumptuous but it works); if not we build with
# partial PGO and if yes then full-blown PGO. 

if kiss l foot; then
# Then we generate some PGO data
foot_tmp=$(mktemp)
./build/foot --config=/dev/null \
    --term=xterm \
    sh -c \
    scripts/generate-alt-random-writes.py \
    --scroll \
    --scroll-region \
    --colors-regular \
    --colors-bright \
    --colors-rgb \
    ${foot_tmp} && cat ${foot_tmp}
rm "${foot_tmp}"

else
foot_tmp=$(mktemp)
scripts/generate-alt-random-writes.py \
    --rows=67 \
    --cols=135 \
    --scroll \
    --scroll-region \
    --colors-regular \
    --colors-bright \
    --colors-rgb \
    --attr-bold \
    --attr-italic \
    --attr-underline \
    --sixel \
    ${foot_tmp}

./pgo ${foot_tmp} ${foot_tmp} ${foot_tmp}
rm ${foot_tmp}

fi

# This is required for llvm
llvm-profdata merge default_*profraw --output=default.profdata
# Make sure it's in the right directory
mv *.profdata build

# Now we should *use* the PGO data
# Note: we will get a hash mismatch because of this
meson configure -Db_pgo=use build

ninja -C build
ninja -C build install
