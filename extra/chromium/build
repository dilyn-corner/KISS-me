#!/bin/sh -e

# Apply musl patches
for patch in musl-*.patch; do
    patch -p0 < "$patch"
done

# Apply some fun chromium patches
for patch in chromium-*.patch; do
    patch -p1 < "$patch"
done

# Patches for wyverkiss
for patch in wyverkiss-*.patch; do
    patch -p1 < "$patch"
done

# Ungoogled-Chromium patches
for patch in 00*.patch; do
    patch -p1 < "$patch"
done

printf "Pruning binaries\n"
python3 ungoogled-chromium/utils/prune_binaries.py \
    ./ ungoogled-chromium/pruning.list

printf "Applying domain substitution\n"
python3 ungoogled-chromium/utils/domain_substitution.py apply \
    -r ungoogled-chromium/domain_regex.list \
    -f ungoogled-chromium/domain_substitution.list \
    -c domainsubcache.tar.gz ./

# Avoid falling back to preprocessor mode when sources contain time macros
kiss list ccache && export CCACHE_SLOPPINESS=time_macros

# Force script incompatible with Python 3 to use /usr/bin/python2
sed -i "1s|python$|&2|" third_party/dom_distiller_js/protoc_plugins/*.py

mkdir -p third_party/node/linux/node-linux-x64/bin
ln -s /usr/bin/node third_party/node/linux/node-linux-x64/bin/

export CC=clang
export CXX=clang++
export AR=llvm-ar
export NM=llvm-nm

# compile gn earl, so it can be used to generate gni stuff
# Explicitly include the things libstdc++ is expected to have
LDFLAGS="$LDFLAGS -lc++ -lc++abi -lunwind" \
    python2 tools/gn/bootstrap/bootstrap.py --skip-generate-buildfiles

# libpng: KISS builds with APNG patch (https://crbug.com/752403#c10)
# zlib: KISS builds without minizip
system="
    ffmpeg
    flac
    fontconfig
    freetype
    harfbuzz-ng
    libdrm
    libjpeg
    libwebp
    opus
"

# remove build scripts for system provided dependencies - basically does the
# same as the bundled script to remove bundled libs, but this way we don't
# have to list the remaining libs
for LIB in "$system" libjpeg_turbo; do
    find . -type f -path "*third_party/$LIB/*" \
        \! -path "*third_party/$LIB/chromium/*" \
        \! -path "*third_party/$LIB/google/*" \
        \! -path './base/third_party/icu/*' \
        \! -path './third_party/pdfium/third_party/freetype/include/pstables.h' \
        \! -path './third_party/harfbuzz-ng/utils/hb_scoped.h' \
        \! -name '*.gn' \
        \! -name '*.gni' \
        \! -name '*.isolate' \
        \! -name '*.py' \
        -exec rm -rf {} +
done
        #\! -regex '.*\.\(gn\|gni\|isolate\|py\)' \

# switch to system provided dependencies
# shellcheck disable=2086
python2 build/linux/unbundle/replace_gn_files.py --system-libraries $system
python2 third_party/libaddressinput/chromium/tools/update-strings.py

kiss list libva && vaapi=true

sed -i 's/OFFICIAL_BUILD/GOOGLE_CHROME_BUILD/' \
    tools/generate_shim_headers/generate_shim_headers.py

conf="
    is_cfi=false
    use_lld=true
    is_clang=true
    is_debug=false
    use_thin_lto=true
    use_custom_libcxx=false
    clang_use_plugins=false
    is_official_build=false
    is_component_build=false
    exclude_unwind_tables=true
    clang_use_chrome_plugins=false
    is_unsafe_developer_build=false
    blink_symbol_level=0
    enable_profiling=true
    enable_stripping=true
    fatal_linker_warnings=false
    treat_warnings_as_errors=false
    thin_lto_enable_optimizations=true
    host_toolchain=\"//build/toolchain/linux/unbundle:default\"
    custom_toolchain=\"//build/toolchain/linux/unbundle:default\"
    use_atk=false
    use_cups=false
    use_gtk=false
    use_x11=false
    use_dbus=false
    use_glib=false
    use_gold=false
    use_udev=false
    use_libpci=false
    use_sysroot=false
    use_xkbcommon=true
    use_kerberos=false
    use_pulseaudio=false
    use_allocator=\"none\"
    use_allocator_shim=false
    use_gnome_keyring=false
    use_vaapi=${vaapi:-false}
    use_pangocairo=false
    use_system_zlib=true
    use_intel_minigbm=true
    use_system_libdrm=true
    use_system_minigbm=true
    use_webaudio_ffmpeg=true
    use_system_freetype=true
    use_system_harfbuzz=true
    use_system_libwayland=true
    use_system_wayland_scanner=true
    enable_widevine=false
    proprietary_codecs=false
    ffmpeg_branding=\"Chromium\"
    link_pulseaudio=false
    use_ozone=true
    ozone_platform_x11=false
    ozone_platform_wayland=true
    rtc_use_pipewire=false
    symbol_level=0
    enable_vr=false
    enable_mdns=false
    enable_nacl=false
    enable_remoting=false
    enable_reporting=false
    enable_nacl_nonsfi=false
    enable_reading_list=false
    enable_service_discovery=false
    enable_js_type_check=false
    enable_hangout_services_extension=false
    enable_mse_mpeg2ts_stream_parser=true
    enable_one_click_signin=false
    safe_browsing_mode=0
    rtc_build_tools=false
    build_dawn_tests=false
    pdf_is_complete_lib=true
    v8_enable_i18n_support=false
    enable_perfetto_unittests=false
    fieldtrial_testing_like_official_build=true
    use_official_google_api_keys=false
    use_unofficial_version_number=false
    google_api_key=\"\"
    google_default_client_id=\"\"
    google_default_client_secret=\"\"
"

out/Release/gn gen out/Release --args="$conf" --script-executable=python2

# final link needs lots of file descriptors, almost all shells support the -n flag
# shellcheck disable=2039
ulimit -n 4096

ninja -C out/Release chrome

# Package
mkdir -p                        "$1/usr/lib/chromium/locales"
mkdir -p                        "$1/usr/lib/chromium/swiftshader"
cp out/Release/locales/*.pak    "$1/usr/lib/chromium/locales"
cp out/Release/swiftshader/*.so "$1/usr/lib/chromium/swiftshader"

install -Dm755 chromium.sh                          "$1/usr/bin/chromium"
install -Dm755 out/Release/chrome                   "$1/usr/lib/chromium/chromium"
install -Dm644 out/Release/icudtl.dat               "$1/usr/lib/chromium"
install -Dm755 out/Release/swiftshader/libEGL.so    "$1/usr/lib/chromium"
install -Dm755 out/Release/swiftshader/libGLESv2.so "$1/usr/lib/chromium"

for stuff in bin pak; do
    install -Dm644 out/Release/*.$stuff "$1/usr/lib/chromium"
done

# Install the license
install -Dm755 LICENSE "$1/usr/share/LICENSES/chromium.license"
