--- a/gfx/gl/GLContextEGL.h
+++ b/gfx/gl/GLContextEGL.h
@@ -118,7 +118,7 @@
   static EGLSurface CreateEGLSurfaceForCompositorWidget(
       widget::CompositorWidget* aCompositorWidget, const EGLConfig aConfig);
 
-#ifdef MOZ_X11
+#if defined(MOZ_X11) || defined(MOZ_WAYLAND)
   static bool FindVisual(bool aUseWebRender, bool useAlpha,
                          int* const out_visualId);
 #endif
--- a/widget/gtk/nsWindow.cpp
+++ b/widget/gtk/nsWindow.cpp
@@ -4401,6 +4401,7 @@

       // Use GL/WebRender compatible visual only when it is necessary, since
       // the visual consumes more memory.
+#ifdef MOZ_X11
       if (mIsX11Display && mIsAccelerated) {
         if (useWebRender) {
           // WebRender rquests AlphaVisual for making readback to work
@@ -4435,6 +4436,7 @@
           NS_WARNING("We're missing X11 Visual!");
         }
       }
+#endif

       if (!isSetVisual && needsAlphaVisual) {
         GdkScreen* screen = gtk_widget_get_screen(mShell);

--- a/widget/gtk/moz.build
+++ b/widget/gtk/moz.build
@@ -90,12 +90,8 @@
 if CONFIG["MOZ_X11"] or CONFIG["MOZ_WAYLAND"]:
     UNIFIED_SOURCES += [
         "nsClipboard.cpp",
-        "nsClipboardX11.cpp",
         "nsDragService.cpp",
         "WindowSurfaceProvider.cpp",
-        "WindowSurfaceX11.cpp",
-        "WindowSurfaceX11Image.cpp",
-        "WindowSurfaceXRender.cpp",
     ]
     EXPORTS.mozilla.widget += [
         "WindowSurfaceProvider.h",
@@ -103,6 +99,7 @@
 
 if CONFIG["MOZ_X11"]:
     UNIFIED_SOURCES += [
+        "nsClipboardX11.cpp",
         "WindowSurfaceX11.cpp",
         "WindowSurfaceX11Image.cpp",
         "WindowSurfaceXRender.cpp",
--- a/widget/gtk/nsUserIdleServiceGTK.cpp
+++ b/widget/gtk/nsUserIdleServiceGTK.cpp
@@ -68,11 +68,13 @@
 
 #ifdef MOZ_X11
 nsUserIdleServiceGTK::nsUserIdleServiceGTK() : mXssInfo(nullptr) {
+    Initialize();
+}
 #else
 nsUserIdleServiceGTK::nsUserIdleServiceGTK() {
-#endif
   Initialize();
 }
+#endif
 
 nsUserIdleServiceGTK::~nsUserIdleServiceGTK() {
 #ifdef MOZ_X11
@@ -108,6 +110,7 @@
     return false;
   }
 
+#ifdef MOZ_X11
   if (!_XSSQueryExtension || !_XSSAllocInfo || !_XSSQueryInfo) {
     return false;
   }
@@ -123,6 +126,7 @@
   // If we get here, we couldn't get to XScreenSaver:
   MOZ_LOG(sIdleLog, LogLevel::Warning, ("XSSQueryExtension returned false!\n"));
   return false;
 }
+#endif
 
 bool nsUserIdleServiceGTK::UsePollMode() { return sInitialized; }
