--- a/dom/plugins/base/nsNPAPIPlugin.cpp
+++ b/dom/plugins/base/nsNPAPIPlugin.cpp
@@ -58,7 +58,9 @@
 // needed for nppdf plugin
 #if (MOZ_WIDGET_GTK)
 #  include <gdk/gdk.h>
-#  include <gdk/gdkx.h>
+#  ifdef MOZ_X11
+#     include <gdk/gdkx.h>
+#  endif
 #endif
 
 #include "nsJSUtils.h"
--- a/dom/ipc/ContentChild.cpp
+++ b/dom/ipc/ContentChild.cpp
@@ -6,7 +6,9 @@
 
 #ifdef MOZ_WIDGET_GTK
 #  include <gtk/gtk.h>
-#  include <gdk/gdkx.h>
+#  ifdef MOZ_X11
+#   include <gdk/gdkx.h>
+#  endif
 #endif
 
 #include "ContentChild.h"
--- a/toolkit/xre/nsGDKErrorHandler.cpp
+++ b/toolkit/xre/nsGDKErrorHandler.cpp
@@ -6,7 +6,9 @@
 #include "nsGDKErrorHandler.h"
 
 #include <gtk/gtk.h>
-#include <gdk/gdkx.h>
+#ifdef MOZ_X11
+#   include <gdk/gdkx.h>
+#endif
 #include <errno.h>
 #include <stdlib.h>
 #include <string.h>
--- a/toolkit/components/remote/nsGTKRemoteServer.cpp
+++ b/toolkit/components/remote/nsGTKRemoteServer.cpp
@@ -9,7 +9,9 @@
 
 #include <gtk/gtk.h>
 #include <gdk/gdk.h>
-#include <gdk/gdkx.h>
+#ifdef MOZ_X11
+#       include <gdk/gdkx.h>
+#endif
 
 #include "mozilla/ModuleUtils.h"
 #include "nsAppShellCID.h"
--- a/toolkit/components/remote/nsGTKRemoteServer.h
+++ b/toolkit/components/remote/nsGTKRemoteServer.h
@@ -9,7 +9,9 @@
 #define __nsGTKRemoteServer_h__
 
 #include <gdk/gdk.h>
-#include <gdk/gdkx.h>
+#ifdef MOZ_X11
+# include <gdk/gdkx.h>
+#endif
 #include <gtk/gtk.h>
 
 #include "nsRemoteServer.h"
--- a/widget/ScreenManager.cpp
+++ b/widget/ScreenManager.cpp
@@ -13,7 +13,9 @@
 #include "mozilla/StaticPtr.h"
 #ifdef MOZ_WAYLAND
 #  include <gdk/gdk.h>
-#  include <gdk/gdkx.h>
+#  ifdef MOZ_X11
+#    include <gdk/gdkx.h>
+#  endif
 #  include <gdk/gdkwayland.h>
 #endif /* MOZ_WAYLAND */
 
--- a/widget/GfxInfoX11.cpp
+++ b/widget/GfxInfoX11.cpp
@@ -21,7 +21,10 @@
 
 #include "GfxInfoX11.h"
 
-#include <gdk/gdkx.h>
+#ifdef MOZ_X11
+#       include <gdk/gdkx.h>
+#endif
+
 #ifdef MOZ_WAYLAND
 #  include "mozilla/widget/nsWaylandDisplay.h"
 #  include "mozilla/widget/DMABufLibWrapper.h"
--- a/widget/gtk/nsPrintDialogGTK.cpp
+++ b/widget/gtk/nsPrintDialogGTK.cpp
@@ -25,7 +25,10 @@
 #include "nsIObserverService.h"
 
 // for gdk_x11_window_get_xid
-#include <gdk/gdkx.h>
+#ifdef MOZ_X11
+#   include <gdk/gdkx.h>
+#endif
+
 #include <sys/types.h>
 #include <sys/stat.h>
 #include <fcntl.h>
--- a/widget/gtk/nsClipboardX11.cpp
+++ b/widget/gtk/nsClipboardX11.cpp
@@ -22,14 +22,17 @@
 #include <gtk/gtk.h>
 
 // For manipulation of the X event queue
-#include <X11/Xlib.h>
 #include <poll.h>
-#include <gdk/gdkx.h>
 #include <sys/time.h>
 #include <sys/types.h>
 #include <errno.h>
 #include <unistd.h>
-#include "X11UndefineNone.h"
+
+#ifdef MOZ_X11
+#   include <X11/Xlib.h>
+#   include <gdk/gdkx.h>
+#   include "X11UndefineNone.h"
+#endif
 
 using namespace mozilla;
 
--- a/widget/gtk/nsGtkKeyUtils.cpp
+++ b/widget/gtk/nsGtkKeyUtils.cpp
@@ -12,7 +12,9 @@
 #include <gdk/gdkkeysyms.h>
 #include <algorithm>
 #include <gdk/gdk.h>
-#include <gdk/gdkx.h>
+#ifdef MOZ_X11
+#   include <gdk/gdkx.h>
+#endif
 #include <dlfcn.h>
 #include <gdk/gdkkeysyms-compat.h>
 #include <X11/XKBlib.h>
--- a/widget/gtk/MozContainerWayland.cpp
+++ b/widget/gtk/MozContainerWayland.cpp
@@ -9,7 +9,9 @@
 
 #include <glib.h>
 #include <gtk/gtk.h>
-#include <gdk/gdkx.h>
+#ifdef MOZ_X11
+#   include <gdk/gdkx.h>
+#endif
 #include "nsWaylandDisplay.h"
 #include "gfxPlatformGtk.h"
 #include <wayland-egl.h>
--- a/widget/gtk/nsDragService.cpp
+++ b/widget/gtk/nsDragService.cpp
@@ -22,7 +22,9 @@
 #include "prthread.h"
 #include <dlfcn.h>
 #include <gtk/gtk.h>
-#include <gdk/gdkx.h>
+#ifdef MOZ_X11
+#   include <gdk/gdkx.h>
+#endif
 #include "nsCRT.h"
 #include "mozilla/BasicEvents.h"
 #include "mozilla/Services.h"
--- a/widget/gtk/DMABufLibWrapper.cpp
+++ b/widget/gtk/DMABufLibWrapper.cpp
@@ -12,7 +12,9 @@
 #include "mozilla/gfx/gfxVars.h"
 
 #include <gdk/gdk.h>
-#include <gdk/gdkx.h>
+#ifdef MOZ_X11
+#   include <gdk/gdkx.h>
+#endif
 
 #include <sys/types.h>
 #include <sys/stat.h>
--- a/widget/gtk/MozContainer.cpp
+++ b/widget/gtk/MozContainer.cpp
@@ -9,7 +9,9 @@
 
 #include <glib.h>
 #include <gtk/gtk.h>
-#include <gdk/gdkx.h>
+#ifdef MOZ_X11
+#   include <gdk/gdkx.h>
+#endif
 #include <stdio.h>
 #ifdef MOZ_WAYLAND
 #  include "gfxPlatformGtk.h"
--- a/layout/xul/nsMenuPopupFrame.cpp
+++ b/layout/xul/nsMenuPopupFrame.cpp
@@ -58,7 +58,9 @@
 #include <algorithm>
 #ifdef MOZ_WAYLAND
 #  include <gdk/gdk.h>
-#  include <gdk/gdkx.h>
+#  ifdef MOZ_X11
+#    include <gdk/gdkx.h>
+#  endif
 #  include <gdk/gdkwayland.h>
 #endif /* MOZ_WAYLAND */
 
--- a/gfx/src/X11Util.h
+++ b/gfx/src/X11Util.h
@@ -11,7 +11,9 @@
 
 #if defined(MOZ_WIDGET_GTK)
 #  include <gdk/gdk.h>
-#  include <gdk/gdkx.h>
+#  ifdef MOZ_X11
+#    include <gdk/gdkx.h>
+#  endif
 #  include "X11UndefineNone.h"
 #else
 #  error Unknown toolkit
--- a/gfx/webrender_bindings/RenderThread.cpp
+++ b/gfx/webrender_bindings/RenderThread.cpp
@@ -38,7 +38,7 @@
 #  include "mozilla/webrender/RenderAndroidSurfaceTextureHost.h"
 #endif
 
-#ifdef MOZ_WIDGET_GTK
+#if defined(MOZ_WIDGET_GTK) && defined(MOZ_X11)
 #  include <gdk/gdkx.h>
 #endif
 
--- a/gfx/webrender_bindings/RenderCompositorEGL.cpp
+++ b/gfx/webrender_bindings/RenderCompositorEGL.cpp
@@ -18,7 +18,9 @@
 #ifdef MOZ_WAYLAND
 #  include "mozilla/widget/GtkCompositorWidget.h"
 #  include <gdk/gdk.h>
-#  include <gdk/gdkx.h>
+#  ifdef MOZ_X11
+#    include <gdk/gdkx.h>
+#  endif
 #endif
 
 #ifdef MOZ_WIDGET_ANDROID
--- a/dom/plugins/ipc/PluginInstanceChild.cpp
+++ b/dom/plugins/ipc/PluginInstanceChild.cpp
@@ -17,6 +17,7 @@
 #include "mozilla/gfx/2D.h"
 #ifdef MOZ_X11
 #  include "gfxXlibSurface.h"
+#  include <gdk/gdkx.h>
 #endif
 #ifdef XP_WIN
 #  include "mozilla/D3DMessageUtils.h"
@@ -47,7 +48,6 @@
 #ifdef MOZ_WIDGET_GTK
 
 #  include <gtk/gtk.h>
-#  include <gdk/gdkx.h>
 #  include <gdk/gdk.h>
 
 #elif defined(OS_WIN)
@@ -1247,7 +1247,7 @@
 
 #elif defined(ANDROID)
   // TODO: Need Android impl
-#elif defined(MOZ_WIDGET_UIKIT)
+#elif defined(MOZ_WIDGET_UIKIT) || defined(MOZ_WAYLAND)
   // Don't care
 #else
 #  error Implement me for your OS
@@ -1257,7 +1257,7 @@
 }
 
 bool PluginInstanceChild::Initialize() {
-#ifdef MOZ_WIDGET_GTK
+#if defined(MOZ_WIDGET_GTK) && defined(MOZ_X11)
   if (mWsInfo.display) {
     // Already initialized
     return true;
--- a/dom/plugins/base/nsPluginHost.cpp
+++ b/dom/plugins/base/nsPluginHost.cpp
@@ -87,7 +87,9 @@
 #endif
 #if (MOZ_WIDGET_GTK)
 #  include <gdk/gdk.h>
-#  include <gdk/gdkx.h>
+#  ifdef MOZ_X11
+#    include <gdk/gdkx.h>
+#  endif
 #endif
 
 #include "npapi.h"
@@ -278,7 +280,7 @@
   }
 
   bool waylandBackend = false;
-#if MOZ_WIDGET_GTK
+#if 0
   GdkDisplay* display = gdk_display_get_default();
   if (display) {
     waylandBackend = !GDK_IS_X11_DISPLAY(display);
--- a/dom/plugins/base/nsPluginNativeWindow.cpp
+++ b/dom/plugins/base/nsPluginNativeWindow.cpp
@@ -17,7 +17,7 @@
   nsPluginNativeWindowImpl();
   virtual ~nsPluginNativeWindowImpl();
 
-#ifdef MOZ_WIDGET_GTK
+#if 0
   NPSetWindowCallbackStruct mWsInfo;
 #endif
 };
@@ -32,14 +32,14 @@
   memset(&clipRect, 0, sizeof(clipRect));
   type = NPWindowTypeWindow;
 
-#ifdef MOZ_WIDGET_GTK
+#if 0
   ws_info = &mWsInfo;
   mWsInfo.type = 0;
   mWsInfo.display = nullptr;
   mWsInfo.visual = nullptr;
   mWsInfo.colormap = 0;
   mWsInfo.depth = 0;
-#elif defined(XP_UNIX) && !defined(XP_MACOSX)
+#elif 0
   ws_info = nullptr;
 #endif
 }
--- a/dom/plugins/ipc/PluginModuleChild.cpp
+++ b/dom/plugins/ipc/PluginModuleChild.cpp
@@ -12,7 +12,7 @@

 #include "mozilla/ipc/MessageChannel.h"

-#ifdef MOZ_WIDGET_GTK
+#if 0
 #  include <gtk/gtk.h>
 #  include <gdk/gdkx.h>
 #endif
@@ -25,7 +25,7 @@
 #include "nsPluginsDir.h"
 #include "nsXULAppAPI.h"

-#ifdef MOZ_X11
+#if 0
 #  include "nsX11ErrorHandler.h"
 #  include "mozilla/X11Util.h"
 #endif
@@ -100,7 +100,7 @@ PluginModuleChild::PluginModuleChild(bool aIsChrome)
 #if defined(OS_WIN) || defined(OS_MACOSX)
       ,
       mGetEntryPointsFunc(0)
-#elif defined(MOZ_WIDGET_GTK)
+#elif 0
       ,
       mNestedLoopTimerId(0)
 #endif
@@ -254,7 +254,7 @@ bool PluginModuleChild::InitForChrome(const std::string& aPluginFilename,
   // XXX quirks isn't initialized yet
   mAsyncRenderSupport = info.fSupportsAsyncRender;
 #endif
-#if defined(MOZ_X11)
+#if 0
   constexpr auto flash10Head = "Shockwave Flash 10."_ns;
   if (StringBeginsWith(nsDependentCString(info.fDescription), flash10Head)) {
     AddQuirk(QUIRK_FLASH_EXPOSE_COORD_TRANSLATION);
@@ -267,7 +267,7 @@ bool PluginModuleChild::InitForChrome(const std::string& aPluginFilename,
   mozilla::plugins::PluginUtilsOSX::SetProcessName(nameBuffer);
 #endif
   pluginFile.FreePluginInfo(info);
-#if defined(MOZ_X11) || defined(XP_MACOSX)
+#if 0
   if (!mLibrary)
 #endif
   {
@@ -330,7 +330,7 @@ bool PluginModuleChild::InitForChrome(const std::string& aPluginFilename,
   return true;
 }

-#if defined(MOZ_WIDGET_GTK)
+#if 0

 typedef void (*GObjectDisposeFn)(GObject*);
 typedef gboolean (*GtkWidgetScrollEventFn)(GtkWidget*, GdkEventScroll*);
@@ -550,7 +550,7 @@ bool PluginModuleChild::ShouldContinueFromReplyTimeout() {
 }

 bool PluginModuleChild::InitGraphics() {
-#if defined(MOZ_WIDGET_GTK)
+#if 0
   // Work around plugins that don't interact well with GDK
   // client-side windows.
   PR_SetEnv("GDK_NATIVE_WINDOWS=1");
@@ -588,7 +588,7 @@ bool PluginModuleChild::InitGraphics() {
 #else
   // may not be necessary on all platforms
 #endif
-#ifdef MOZ_X11
+#if 0
   // Do this after initializing GDK, or GDK will install its own handler.
   InstallX11ErrorHandler();
 #endif
@@ -596,7 +596,7 @@ bool PluginModuleChild::InitGraphics() {
 }

 void PluginModuleChild::DeinitGraphics() {
-#if defined(MOZ_X11) && defined(NS_FREE_PERMANENT_DATA)
+#if 0
   // We free some data off of XDisplay close hooks, ensure they're
   // run.  Closing the display is pretty scary, so we only do it to
   // silence leak checkers.
@@ -1000,7 +1000,7 @@ NPError _getvalue(NPP aNPP, NPNVariable aVariable, void* aValue) {
   switch (aVariable) {
     // Copied from nsNPAPIPlugin.cpp
     case NPNVToolkit:
-#if defined(MOZ_WIDGET_GTK)
+#if 0
       *static_cast<NPNToolkitType*>(aValue) = NPNVGtk2;
       return NPERR_NO_ERROR;
 #endif
@@ -1026,7 +1026,7 @@ NPError _getvalue(NPP aNPP, NPNVariable aVariable, void* aValue) {
     case NPNVSupportsWindowless:
       *(NPBool*)aValue = true;
       return NPERR_NO_ERROR;
-#if defined(MOZ_WIDGET_GTK)
+#if 0
     case NPNVxDisplay: {
       if (!aNPP) {
         return NPERR_INVALID_INSTANCE_ERROR;
@@ -1556,8 +1556,8 @@ NPError PluginModuleChild::DoNP_Initialize(const PluginSettings& aSettings) {
   SetEventHooks();
 #endif

-#ifdef MOZ_X11
-#  ifdef MOZ_WIDGET_GTK
+#if 0
+#  if 0
   if (!GDK_IS_X11_DISPLAY(gdk_display_get_default())) {
     // We don't support NPAPI plugins on Wayland.
     return NPERR_GENERIC_ERROR;
